// Package openapichi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package openapichi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// URLs defines model for URLs.
type URLs struct {
	AdminURL *string `json:"adminURL,omitempty"`
	Data     *string `json:"data,omitempty"`
	FullURL  *string `json:"fullURL,omitempty"`
	ShortURL *string `json:"shortURL,omitempty"`
}

// GetUserFullURLJSONBody defines parameters for GetUserFullURL.
type GetUserFullURLJSONBody URLs

// GetUserFullURLJSONRequestBody defines body for GetUserFullURL for application/json ContentType.
type GetUserFullURLJSONRequestBody GetUserFullURLJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /getData/{adminURL})
	AdminRedirect(w http.ResponseWriter, r *http.Request, adminURL string)

	// (GET /home)
	GetUserFullURL(w http.ResponseWriter, r *http.Request)

	// (POST /shortenURL)
	GenShortURL(w http.ResponseWriter, r *http.Request)

	// (GET /su/{shortURL})
	Redirect(w http.ResponseWriter, r *http.Request, shortURL string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AdminRedirect operation middleware
func (siw *ServerInterfaceWrapper) AdminRedirect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "adminURL" -------------
	var adminURL string

	err = runtime.BindStyledParameter("simple", false, "adminURL", chi.URLParam(r, "adminURL"), &adminURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "adminURL", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminRedirect(w, r, adminURL)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserFullURL operation middleware
func (siw *ServerInterfaceWrapper) GetUserFullURL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserFullURL(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GenShortURL operation middleware
func (siw *ServerInterfaceWrapper) GenShortURL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenShortURL(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Redirect operation middleware
func (siw *ServerInterfaceWrapper) Redirect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortURL" -------------
	var shortURL string

	err = runtime.BindStyledParameter("simple", false, "shortURL", chi.URLParam(r, "shortURL"), &shortURL)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortURL", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Redirect(w, r, shortURL)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/getData/{adminURL}", wrapper.AdminRedirect)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/home", wrapper.GetUserFullURL)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/shortenURL", wrapper.GenShortURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/su/{shortURL}", wrapper.Redirect)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yVTW/bPAzHv4rA5zk6Udp1F99WbCsGZJcUOQ09qDadqLAljaKTFYa/+0A5bpfWBbIN",
	"3YCd5Ig0X35/k+mg8E3wDh1HyDuIxRYbkx7Xq2U6A/mAxBbTL1M21q1XS3nm+4CQQ2SybgN9BqVhM2mo",
	"2rp+6aW49cTTxj4bb/ztHRYMvVxZV/nkbLkW26Xlz6jWq6VKodAhQQY7pGi9gxzO5gvJ4wM6Eyzk8Ga+",
	"mJ9DBsHwNjWlN8jvDRvdje31cr1BlqPEWJANPERbYWkJC1bslbwDKTIZMX8qIYd3EmL0SlnINMhIEfIv",
	"HVgJIpkhA2caaeCBaQaEX1tLWELO1GJ20GMKzY04x+BdHIQ5XyzkKLxjdKluE0Jti1SYvotSfPdDvP8J",
	"K8jhP/34AeiD+jpJn1gf9x7bosAYq7ZWDz0L2ovFxXNQqaski/OsKt+6UnzfDnUe+1rHSM7UKiLtkBQS",
	"eZIK+gz01gulF+S4QpYcUVXkG7W+/rB6JsgV8joifTx8gwNkjHzpy/tXRyZR1K1keipuPy3gqcQnnIWz",
	"ERq/xvkwPYdRDD5O4nZSBQ6jpgaeT3G763GkT2X9bbbf72eVp2bWUo2u8KVg+uPw/9L0vIKWre7GxXra",
	"Lnscj2M5f2qTxWPh/5FN9rs7TP7k0t3AraUactgyh5hrbYKdD9Y5Y2S9O4P+pv8eAAD//79aPc+YBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
